class Node {
	
	value;
	leftChild;
	rightChild;
	parentNode;
	
	constructor(array, iteration, caller, right){
		try {
			
			if (iteration !== 0) {
				this.value = array[middleIndex()];
				delete(array[middleIndex()]);
				this.leftChild = new Node(array, ++iteration, this, false);
				this.rightChild = new Node(array, ++iteration, this, false);
				this.parentNode = this.caller;
			}
			else if (array[median] !== undefined){
				this.value = array[median];
				delete(array[median]);
				this.leftChild = new Node(array, ++iteration, this, false);
				this.rightChild = new Node(array, ++iteration, this, false);
				this.parentNode = this;
			}
			else if (median < 1) {
				this.right = true;
				return;
			}
			else {
				return;
			}
			
		}
		catch {
			
			return;
			
		}
	}
	
}

var sortedList = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]; //8


//projections
var size = sortedList.length;
var mod = size%2;
//initial node values
var median = Math.floor(sortedList.length/2);
var left = Math.floor((sortedList.length/2)/2);
var right = Math.floor((sortedList.length/2) + Math.ceil((sortedList.length/2)/2));

//functions
function leftIndex(currentIteration) {
	currentIndex = median + mod;
	for (i=0;i<=currentIteration;i++) {
		currentIndex = currentIndex/2;
	}
	return sortedList[Math.ceil(currentIndex)];
}

function rightIndex() {
	return null;
}

function middleIndex() {
	return null;
}

//implementation
debugger;
var tree = new Node(sortedList, 0, this, false);